import "steammessages.proto";

option optimize_for = SPEED;
option cc_generic_services = false;

enum EGCBaseMsg {
	k_EMsgGCSystemMessage = 4001;
	k_EMsgGCReplicateConVars = 4002;
	k_EMsgGCConVarUpdated = 4003;
	k_EMsgGCInQueue = 4008;
	k_EMsgGCInviteToParty = 4501;
	k_EMsgGCInvitationCreated = 4502;
	k_EMsgGCPartyInviteResponse = 4503;
	k_EMsgGCKickFromParty = 4504;
	k_EMsgGCLeaveParty = 4505;
	k_EMsgGCServerAvailable = 4506;
	k_EMsgGCClientConnectToServer = 4507;
	k_EMsgGCGameServerInfo = 4508;
	k_EMsgGCError = 4509;
	k_EMsgGCReplay_UploadedToYouTube = 4510;
	k_EMsgGCLANServerAvailable = 4511;
}

enum EGCBaseProtoObjectTypes {
	k_EProtoObjectPartyInvite = 1001;
	k_EProtoObjectLobbyInvite = 1002;
}

enum GC_BannedWordType {
	GC_BANNED_WORD_DISABLE_WORD = 0;
	GC_BANNED_WORD_ENABLE_WORD = 1;
}

message CGCStorePurchaseInit_LineItem {
	optional uint32 item_def_id = 1;
	optional uint32 quantity = 2;
	optional uint32 cost_in_local_currency = 3;
	optional uint32 purchase_type = 4;
}

message CMsgGCStorePurchaseInit {
	optional string country = 1;
	optional int32 language = 2;
	optional int32 currency = 3;
	repeated .CGCStorePurchaseInit_LineItem line_items = 4;
}

message CMsgGCStorePurchaseInitResponse {
	optional int32 result = 1;
	optional uint64 txn_id = 2;
	optional string url = 3;
	repeated uint64 item_ids = 4;
}

message CSOPartyInvite {
	optional uint64 group_id = 1 [(key_field) = true];
	optional fixed64 sender_id = 2;
	optional string sender_name = 3;
}

message CSOLobbyInvite {
	optional uint64 group_id = 1 [(key_field) = true];
	optional fixed64 sender_id = 2;
	optional string sender_name = 3;
}

message CMsgSystemBroadcast {
	optional string message = 1;
}

message CMsgInviteToParty {
	optional fixed64 steam_id = 1;
	optional uint32 client_version = 2;
	optional uint32 team_invite = 3;
}

message CMsgInvitationCreated {
	optional uint64 group_id = 1;
	optional fixed64 steam_id = 2;
}

message CMsgPartyInviteResponse {
	optional uint64 party_id = 1;
	optional bool accept = 2;
	optional uint32 client_version = 3;
	optional uint32 team_invite = 4;
}

message CMsgKickFromParty {
	optional fixed64 steam_id = 1;
}

message CMsgLeaveParty {
}

message CMsgServerAvailable {
}

message CMsgLANServerAvailable {
	optional fixed64 lobby_id = 1;
}

message CSOEconGameAccountClient {
	optional uint32 additional_backpack_slots = 1 [default = 0];
	optional fixed32 bonus_xp_timestamp_refresh = 12;
	optional uint32 bonus_xp_usedflags = 13;
	optional uint32 elevated_state = 14;
	optional uint32 elevated_timestamp = 15;
}

message CSOItemCriteriaCondition {
	optional int32 op = 1;
	optional string field = 2;
	optional bool required = 3;
	optional float float_value = 4;
	optional string string_value = 5;
}

message CSOItemCriteria {
	optional uint32 item_level = 1;
	optional int32 item_quality = 2;
	optional bool item_level_set = 3;
	optional bool item_quality_set = 4;
	optional uint32 initial_inventory = 5;
	optional uint32 initial_quantity = 6;
	optional bool ignore_enabled_flag = 8;
	repeated .CSOItemCriteriaCondition conditions = 9;
	optional int32 item_rarity = 10;
	optional bool item_rarity_set = 11;
	optional bool recent_only = 12;
}

message CSOItemRecipe {
	optional uint32 def_index = 1;
	optional string name = 2;
	optional string n_a = 3;
	optional string desc_inputs = 4;
	optional string desc_outputs = 5;
	optional string di_a = 6;
	optional string di_b = 7;
	optional string di_c = 8;
	optional string do_a = 9;
	optional string do_b = 10;
	optional string do_c = 11;
	optional bool requires_all_same_class = 12;
	optional bool requires_all_same_slot = 13;
	optional int32 class_usage_for_output = 14;
	optional int32 slot_usage_for_output = 15;
	optional int32 set_for_output = 16;
	repeated .CSOItemCriteria input_items_criteria = 20;
	repeated .CSOItemCriteria output_items_criteria = 21;
	repeated uint32 input_item_dupe_counts = 22;
}

message CMsgDevNewItemRequest {
	optional fixed64 receiver = 1;
	optional .CSOItemCriteria criteria = 2;
}

message CMsgIncrementKillCountAttribute {
	optional fixed32 killer_account_id = 1;
	optional fixed32 victim_account_id = 2;
	optional uint64 item_id = 3;
	optional uint32 event_type = 4;
	optional uint32 amount = 5;
}

message CMsgApplySticker {
	optional uint64 sticker_item_id = 1;
	optional uint64 item_item_id = 2;
	optional uint32 sticker_slot = 3;
	optional uint32 baseitem_defidx = 4;
	optional float sticker_wear = 5;
}

message CMsgApplyStatTrakSwap {
	optional uint64 tool_item_id = 1;
	optional uint64 item_1_item_id = 2;
	optional uint64 item_2_item_id = 3;
}

message CMsgApplyStrangePart {
	optional uint64 strange_part_item_id = 1;
	optional uint64 item_item_id = 2;
}

message CMsgApplyPennantUpgrade {
	optional uint64 upgrade_item_id = 1;
	optional uint64 pennant_item_id = 2;
}

message CMsgApplyEggEssence {
	optional uint64 essence_item_id = 1;
	optional uint64 egg_item_id = 2;
}

message CSOEconItemAttribute {
	optional uint32 def_index = 1;
	optional uint32 value = 2;
	optional bytes value_bytes = 3;
}

message CSOEconItemEquipped {
	optional uint32 new_class = 1;
	optional uint32 new_slot = 2;
}

message CSOEconItem {
	optional uint64 id = 1;
	optional uint32 account_id = 2;
	optional uint32 inventory = 3;
	optional uint32 def_index = 4;
	optional uint32 quantity = 5;
	optional uint32 level = 6;
	optional uint32 quality = 7;
	optional uint32 flags = 8 [default = 0];
	optional uint32 origin = 9;
	optional string custom_name = 10;
	optional string custom_desc = 11;
	repeated .CSOEconItemAttribute attribute = 12;
	optional .CSOEconItem interior_item = 13;
	optional bool in_use = 14 [default = false];
	optional uint32 style = 15 [default = 0];
	optional uint64 original_id = 16 [default = 0];
	repeated .CSOEconItemEquipped equipped_state = 18;
	optional uint32 rarity = 19;
}

message CMsgAdjustItemEquippedState {
	optional uint64 item_id = 1;
	optional uint32 new_class = 2;
	optional uint32 new_slot = 3;
	optional bool swap = 4;
}

message CMsgSortItems {
	optional uint32 sort_type = 1;
}

message CSOEconClaimCode {
	optional uint32 account_id = 1;
	optional uint32 code_type = 2;
	optional uint32 time_acquired = 3;
	optional string code = 4;
}

message CMsgStoreGetUserData {
	optional fixed32 price_sheet_version = 1;
	optional int32 currency = 2;
}

message CMsgStoreGetUserDataResponse {
	optional int32 result = 1;
	optional int32 currency_deprecated = 2;
	optional string country_deprecated = 3;
	optional fixed32 price_sheet_version = 4;
	optional bytes price_sheet = 8;
}

message CMsgUpdateItemSchema {
	optional bytes items_game = 1;
	optional fixed32 item_schema_version = 2;
	optional string items_game_url_DEPRECATED2013 = 3;
	optional string items_game_url = 4;
}

message CMsgGCError {
	optional string error_text = 1;
}

message CMsgRequestInventoryRefresh {
}

message CMsgConVarValue {
	optional string name = 1;
	optional string value = 2;
}

message CMsgReplicateConVars {
	repeated .CMsgConVarValue convars = 1;
}

message CMsgUseItem {
	optional uint64 item_id = 1;
	optional fixed64 target_steam_id = 2;
	repeated uint32 gift__potential_targets = 3;
	optional uint32 duel__class_lock = 4;
	optional fixed64 initiator_steam_id = 5;
}

message CMsgReplayUploadedToYouTube {
	optional string youtube_url = 1;
	optional string youtube_account_name = 2;
	optional uint64 session_id = 3;
}

message CMsgConsumableExhausted {
	optional int32 item_def_id = 1;
}

message CMsgItemAcknowledged__DEPRECATED {
	optional uint32 account_id = 1;
	optional uint32 inventory = 2;
	optional uint32 def_index = 3;
	optional uint32 quality = 4;
	optional uint32 rarity = 5;
	optional uint32 origin = 6;
	optional uint64 item_id = 7;
}

message CMsgSetItemPositions {
	message ItemPosition {
		optional uint32 legacy_item_id = 1;
		optional uint32 position = 2;
		optional uint64 item_id = 3;
	}

	repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
}

message CMsgGCReportAbuse {
	optional fixed64 target_steam_id = 1;
	optional string description = 4;
	optional uint64 gid = 5;
	optional uint32 abuse_type = 2;
	optional uint32 content_type = 3;
	optional fixed32 target_game_server_ip = 6;
	optional uint32 target_game_server_port = 7;
}

message CMsgGCReportAbuseResponse {
	optional fixed64 target_steam_id = 1;
	optional uint32 result = 2;
	optional string error_message = 3;
}

message CMsgGCNameItemNotification {
	optional fixed64 player_steamid = 1;
	optional uint32 item_def_index = 2;
	optional string item_name_custom = 3;
}

message CMsgGCClientDisplayNotification {
	optional string notification_title_localization_key = 1;
	optional string notification_body_localization_key = 2;
	repeated string body_substring_keys = 3;
	repeated string body_substring_values = 4;
}

message CMsgGCShowItemsPickedUp {
	optional fixed64 player_steamid = 1;
}

message CMsgGCIncrementKillCountResponse {
	optional uint32 killer_account_id = 1 [(key_field) = true];
	optional uint32 num_kills = 2;
	optional uint32 item_def = 3;
	optional uint32 level_type = 4;
}

message CSOEconItemDropRateBonus {
	optional uint32 account_id = 1;
	optional fixed32 expiration_date = 2;
	optional float bonus = 3;
	optional uint32 bonus_count = 4;
	optional uint64 item_id = 5;
	optional uint32 def_index = 6;
}

message CSOEconItemLeagueViewPass {
	optional uint32 account_id = 1 [(key_field) = true];
	optional uint32 league_id = 2 [(key_field) = true];
	optional uint32 admin = 3;
	optional uint32 itemindex = 4;
}

message CSOEconItemEventTicket {
	optional uint32 account_id = 1;
	optional uint32 event_id = 2;
	optional uint64 item_id = 3;
}

message CMsgGCItemPreviewItemBoughtNotification {
	optional uint32 item_def_index = 1;
}

message CMsgGCStorePurchaseCancel {
	optional uint64 txn_id = 1;
}

message CMsgGCStorePurchaseCancelResponse {
	optional uint32 result = 1;
}

message CMsgGCStorePurchaseFinalize {
	optional uint64 txn_id = 1;
}

message CMsgGCStorePurchaseFinalizeResponse {
	optional uint32 result = 1;
	repeated uint64 item_ids = 2;
}

message CMsgGCBannedWordListRequest {
	optional uint32 ban_list_group_id = 1;
	optional uint32 word_id = 2;
}

message CMsgGCRequestAnnouncements {
}

message CMsgGCRequestAnnouncementsResponse {
	optional string announcement_title = 1;
	optional string announcement = 2;
	optional string nextmatch_title = 3;
	optional string nextmatch = 4;
}

message CMsgGCBannedWord {
	optional uint32 word_id = 1;
	optional .GC_BannedWordType word_type = 2 [default = GC_BANNED_WORD_DISABLE_WORD];
	optional string word = 3;
}

message CMsgGCBannedWordListResponse {
	optional uint32 ban_list_group_id = 1;
	repeated .CMsgGCBannedWord word_list = 2;
}

message CMsgGCToGCBannedWordListBroadcast {
	optional .CMsgGCBannedWordListResponse broadcast = 1;
}

message CMsgGCToGCBannedWordListUpdated {
	optional uint32 group_id = 1;
}

message CSOEconDefaultEquippedDefinitionInstanceClient {
	optional uint32 account_id = 1 [(key_field) = true];
	optional uint32 item_definition = 2;
	optional uint32 class_id = 3 [(key_field) = true];
	optional uint32 slot_id = 4 [(key_field) = true];
}

message CMsgGCToGCDirtySDOCache {
	optional uint32 sdo_type = 1;
	optional uint64 key_uint64 = 2;
}

message CMsgGCToGCDirtyMultipleSDOCache {
	optional uint32 sdo_type = 1;
	repeated uint64 key_uint64 = 2;
}

message CMsgGCCollectItem {
	optional uint64 collection_item_id = 1;
	optional uint64 subject_item_id = 2;
}

message CMsgSDONoMemcached {
}

message CMsgGCToGCUpdateSQLKeyValue {
	optional string key_name = 1;
}

message CMsgGCToGCIsTrustedServer {
	optional fixed64 steam_id = 1;
}

message CMsgGCToGCIsTrustedServerResponse {
	optional bool is_trusted = 1;
}

message CMsgGCToGCBroadcastConsoleCommand {
	optional string con_command = 1;
}

message CMsgGCServerVersionUpdated {
	optional uint32 server_version = 1;
}

message CMsgGCClientVersionUpdated {
	optional uint32 client_version = 1;
}

message CMsgGCToGCWebAPIAccountChanged {
}

message CMsgGCToGCRequestPassportItemGrant {
	optional fixed64 steam_id = 1;
	optional uint32 league_id = 2;
	optional int32 reward_flag = 3;
}

message CMsgGameServerInfo {
	enum ServerType {
		UNSPECIFIED = 0;
		GAME = 1;
		PROXY = 2;
	}

	optional fixed32 server_public_ip_addr = 1;
	optional fixed32 server_private_ip_addr = 2;
	optional uint32 server_port = 3;
	optional uint32 server_tv_port = 4;
	optional string server_key = 5;
	optional bool server_hibernation = 6;
	optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
	optional uint32 server_region = 8;
	optional float server_loadavg = 9;
	optional float server_tv_broadcast_time = 10;
	optional float server_game_time = 11;
	optional fixed64 server_relay_connected_steam_id = 12;
	optional uint32 relay_slots_max = 13;
	optional int32 relays_connected = 14;
	optional int32 relay_clients_connected = 15;
	optional fixed64 relayed_game_server_steam_id = 16;
	optional uint32 parent_relay_count = 17;
	optional fixed64 tv_secret_code = 18;
}

import "steammessages.proto";
import "engine_gcmessages.proto";

option optimize_for = SPEED;
option cc_generic_services = false;

enum ECsgoGCMsg {
	k_EMsgGCCStrike15_v2_Base = 9100;
	k_EMsgGCCStrike15_v2_MatchmakingStart = 9101;
	k_EMsgGCCStrike15_v2_MatchmakingStop = 9102;
	k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing = 9103;
	k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate = 9104;
	k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve = 9105;
	k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse = 9106;
	k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve = 9107;
	k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats = 9108;
	k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello = 9109;
	k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello = 9110;
	k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd = 9111;
	k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon = 9112;
	k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick = 9113;
	k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm = 9114;
	k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats = 9115;
	k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate = 9116;
	k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate = 9117;
	k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty = 9118;
	k_EMsgGCCStrike15_v2_ClientReportPlayer = 9119;
	k_EMsgGCCStrike15_v2_ClientReportServer = 9120;
	k_EMsgGCCStrike15_v2_ClientCommendPlayer = 9121;
	k_EMsgGCCStrike15_v2_ClientReportResponse = 9122;
	k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery = 9123;
	k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse = 9124;
	k_EMsgGCCStrike15_v2_WatchInfoUsers = 9126;
	k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile = 9127;
	k_EMsgGCCStrike15_v2_PlayersProfile = 9128;
	k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate = 9131;
	k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment = 9132;
	k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus = 9133;
	k_EMsgGCCStrike15_v2_GC2ClientTextMsg = 9134;
	k_EMsgGCCStrike15_v2_Client2GCTextMsg = 9135;
	k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops = 9136;
	k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification = 9137;
	k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2 = 9138;
	k_EMsgGCCStrike15_v2_MatchList = 9139;
	k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames = 9140;
	k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames = 9141;
	k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate = 9142;
	k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo = 9144;
	k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification = 9145;
	k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames = 9146;
	k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo = 9147;
	k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest = 9148;
	k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse = 9149;
	k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo = 9150;
	k_EMsgGCToGCReloadVersions = 9151;
	k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote = 9152;
	k_EMsgGCCStrike15_v2_Server2GCClientValidate = 9153;
	k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser = 9154;
	k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure = 9155;
	k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest = 9156;
	k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse = 9157;
	k_EMsgGCCStrike15_v2_AccountPrivacySettings = 9158;
	k_EMsgGCCStrike15_v2_SetMyActivityInfo = 9159;
	k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions = 9160;
	k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions = 9161;
	k_EMsgGCCStrike15_v2_DraftSummary = 9162;
	k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData = 9163;
	k_EMsgGCCStrike15_v2_ClientRequestJoinServerData = 9164;
	k_EMsgGCCStrike15_v2_ClientRequestNewMission = 9165;
	k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded = 9166;
	k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo = 9167;
	k_EMsgGC_GlobalGame_Subscribe = 9168;
	k_EMsgGC_GlobalGame_Unsubscribe = 9169;
	k_EMsgGC_GlobalGame_Play = 9170;
	k_EMsgGCCStrike15_v2_AcknowledgePenalty = 9171;
	k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin = 9172;
	k_EMsgGCCStrike15_v2_GC2ClientGlobalStats = 9173;
	k_EMsgGCCStrike15_v2_Client2GCStreamUnlock = 9174;
	k_EMsgGCCStrike15_v2_FantasyRequestClientData = 9175;
	k_EMsgGCCStrike15_v2_FantasyUpdateClientData = 9176;
	k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket = 9177;
	k_EMsgGCCStrike15_v2_ClientToGCRequestTicket = 9178;
	k_EMsgGCCStrike15_v2_ClientToGCRequestElevate = 9179;
	k_EMsgGCCStrike15_v2_GlobalChat = 9180;
	k_EMsgGCCStrike15_v2_GlobalChat_Subscribe = 9181;
	k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe = 9182;
	k_EMsgGCCStrike15_v2_ClientAuthKeyCode = 9183;
	k_EMsgGCCStrike15_v2_GotvSyncPacket = 9184;
	k_EMsgGCCStrike15_v2_ClientPlayerDecalSign = 9185;
	k_EMsgGCCStrike15_v2_ClientLogonFatalError = 9187;
	k_EMsgGCCStrike15_v2_ClientPollState = 9188;
	k_EMsgGCCStrike15_v2_Party_Register = 9189;
	k_EMsgGCCStrike15_v2_Party_Unregister = 9190;
	k_EMsgGCCStrike15_v2_Party_Search = 9191;
	k_EMsgGCCStrike15_v2_Party_Invite = 9192;
	k_EMsgGCCStrike15_v2_Account_RequestCoPlays = 9193;
	k_EMsgGCCStrike15_v2_ClientGCRankUpdate = 9194;
	k_EMsgGCCStrike15_v2_ClientRequestOffers = 9195;
	k_EMsgGCCStrike15_v2_ClientAccountBalance = 9196;
	k_EMsgGCCStrike15_v2_ClientPartyJoinRelay = 9197;
	k_EMsgGCCStrike15_v2_ClientPartyWarning = 9198;
	k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial = 9199;
}

message GameServerPing {
	optional int32 ping = 2;
	optional uint32 ip = 3;
	optional uint32 instances = 5;
}

message DataCenterPing {
	optional fixed32 data_center_id = 1;
	optional sint32 ping = 2;
}

message DetailedSearchStatistic {
	optional uint32 game_type = 1;
	optional uint32 search_time_avg = 2;
	optional uint32 players_searching = 4;
}

message TournamentPlayer {
	optional uint32 account_id = 1;
	optional string player_nick = 2;
	optional string player_name = 3;
	optional uint32 player_dob = 4;
	optional string player_flag = 5;
	optional string player_location = 6;
	optional string player_desc = 7;
}

message TournamentTeam {
	optional int32 team_id = 1;
	optional string team_tag = 2;
	optional string team_flag = 3;
	optional string team_name = 4;
	repeated .TournamentPlayer players = 5;
}

message TournamentEvent {
	optional int32 event_id = 1;
	optional string event_tag = 2;
	optional string event_name = 3;
	optional uint32 event_time_start = 4;
	optional uint32 event_time_end = 5;
	optional int32 event_public = 6;
	optional int32 event_stage_id = 7;
	optional string event_stage_name = 8;
	optional uint32 active_section_id = 9;
}

message GlobalStatistics {
	optional uint32 players_online = 1;
	optional uint32 servers_online = 2;
	optional uint32 players_searching = 3;
	optional uint32 servers_available = 4;
	optional uint32 ongoing_matches = 5;
	optional uint32 search_time_avg = 6;
	repeated .DetailedSearchStatistic search_statistics = 7;
	optional string main_post_url = 8;
	optional uint32 required_appid_version = 9;
	optional uint32 pricesheet_version = 10;
	optional uint32 twitch_streams_version = 11;
	optional uint32 active_tournament_eventid = 12;
	optional uint32 active_survey_id = 13;
	optional uint32 rtime32_cur = 14;
	optional uint32 rtime32_event_start = 15;
}

message OperationalStatisticDescription {
	optional string name = 1;
	optional uint32 idkey = 2;
}

message OperationalStatisticElement {
	optional uint32 idkey = 1;
	repeated int32 values = 2;
}

message OperationalStatisticsPacket {
	optional int32 packetid = 1;
	optional int32 mstimestamp = 2;
	repeated .OperationalStatisticElement values = 3;
}

message PlayerRankingInfo {
	optional uint32 account_id = 1;
	optional uint32 rank_id = 2;
	optional uint32 wins = 3;
	optional float rank_change = 4;
	optional uint32 rank_type_id = 6;
}

message PlayerCommendationInfo {
	optional uint32 cmd_friendly = 1;
	optional uint32 cmd_teaching = 2;
	optional uint32 cmd_leader = 4;
}

message PlayerMedalsInfo {
	repeated uint32 display_items_defidx = 7;
	optional uint32 featured_display_item_defidx = 8;
}

message AccountActivity {
	optional uint32 activity = 1;
	optional uint32 mode = 2;
	optional uint32 map = 3;
}

message TournamentMatchSetup {
	optional int32 event_id = 1;
	optional int32 team_id_ct = 2;
	optional int32 team_id_t = 3;
	optional int32 event_stage_id = 4;
}

message ServerHltvInfo {
	optional uint32 tv_udp_port = 1;
	optional uint64 tv_watch_key = 2;
	optional uint32 tv_slots = 3;
	optional uint32 tv_clients = 4;
	optional uint32 tv_proxies = 5;
	optional uint32 tv_time = 6;
	optional uint32 game_type = 8;
	optional string game_mapgroup = 9;
	optional string game_map = 10;
	optional uint64 tv_master_steamid = 11;
	optional uint32 tv_local_slots = 12;
	optional uint32 tv_local_clients = 13;
	optional uint32 tv_local_proxies = 14;
	optional uint32 tv_relay_slots = 15;
	optional uint32 tv_relay_clients = 16;
	optional uint32 tv_relay_proxies = 17;
	optional uint32 tv_relay_address = 18;
	optional uint32 tv_relay_port = 19;
	optional uint64 tv_relay_steamid = 20;
	optional uint32 flags = 21;
}

message IpAddressMask {
	optional uint32 a = 1;
	optional uint32 b = 2;
	optional uint32 c = 3;
	optional uint32 d = 4;
	optional uint32 bits = 5;
	optional uint32 token = 6;
}

message XpProgressData {
	optional uint32 xp_points = 1;
	optional int32 xp_category = 2;
}

message MatchEndItemUpdates {
	optional uint64 item_id = 1;
	optional uint32 item_attr_defidx = 2;
	optional uint32 item_attr_delta_value = 3;
}

message ScoreLeaderboardData {
	message Entry {
		optional uint32 tag = 1;
		optional uint32 val = 2;
	}

	message AccountEntries {
		optional uint32 accountid = 1;
		repeated .ScoreLeaderboardData.Entry entries = 2;
	}

	optional uint64 quest_id = 1;
	optional uint32 score = 2;
	repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
	repeated .ScoreLeaderboardData.Entry matchentries = 5;
}

message PlayerQuestData {
	message QuestItemData {
		optional uint64 quest_id = 1;
		optional int32 quest_normal_points_earned = 2;
		optional int32 quest_bonus_points_earned = 3;
	}

	optional uint32 quester_account_id = 1;
	repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
	repeated .XpProgressData xp_progress_data = 3;
	optional uint32 time_played = 4;
	optional uint32 mm_game_mode = 5;
	repeated .MatchEndItemUpdates item_updates = 6;
	optional bool operation_points_eligible = 7;
}

message CMsgGC_ServerQuestUpdateData {
	repeated .PlayerQuestData player_quest_data = 1;
	optional bytes binary_data = 2;
	optional uint32 mm_game_mode = 3;
	optional .ScoreLeaderboardData missionlbsdata = 4;
}

message CMsgGCCStrike15_v2_MatchmakingGCOperationalStats {
	optional int32 packetid = 1;
	repeated .OperationalStatisticDescription namekeys = 2;
	repeated .OperationalStatisticsPacket packets = 3;
}

message CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm {
	optional uint32 token = 1;
	optional uint32 stamp = 2;
	optional uint64 exchange = 3;
}

message CMsgGCCStrike15_v2_GC2ServerReservationUpdate {
	optional uint32 viewers_external_total = 1;
	optional uint32 viewers_external_steam = 2;
}

message CMsgGCCStrike15_v2_MatchmakingStart {
	repeated uint32 account_ids = 1;
	optional uint32 game_type = 2;
	optional string ticket_data = 3;
	optional uint32 client_version = 4;
	optional .TournamentMatchSetup tournament_match = 5;
	optional bool prime_only = 6;
}

message CMsgGCCStrike15_v2_MatchmakingStop {
	optional int32 abandon = 1;
}

message CMsgGCCStrike15_v2_MatchmakingClient2ServerPing {
	repeated .GameServerPing gameserverpings = 1;
	optional int32 offset_index = 2;
	optional int32 final_batch = 3;
	repeated .DataCenterPing data_center_pings = 4;
	optional uint32 max_ping = 5;
	optional fixed32 test_token = 6;
}

message CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate {
	message Note {
		optional int32 type = 1;
		optional int32 region_id = 2;
		optional float region_r = 3;
		optional float distance = 4;
	}

	optional int32 matchmaking = 1;
	repeated uint32 waiting_account_id_sessions = 2;
	optional string error = 3;
	repeated uint32 ongoingmatch_account_id_sessions = 6;
	optional .GlobalStatistics global_stats = 7;
	repeated uint32 failping_account_id_sessions = 8;
	repeated uint32 penalty_account_id_sessions = 9;
	repeated uint32 failready_account_id_sessions = 10;
	repeated uint32 vacbanned_account_id_sessions = 11;
	optional .IpAddressMask server_ipaddress_mask = 12;
	repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
	repeated uint32 penalty_account_id_sessions_green = 14;
	repeated uint32 insufficientlevel_sessions = 15;
	repeated uint32 vsncheck_account_id_sessions = 16;
	repeated uint32 launcher_mismatch_sessions = 17;
}

message CDataGCCStrike15_v2_TournamentMatchDraft {
	message Entry {
		optional int32 mapid = 1;
		optional int32 team_id_ct = 2;
	}

	optional int32 event_id = 1;
	optional int32 event_stage_id = 2;
	optional int32 team_id_0 = 3;
	optional int32 team_id_1 = 4;
	optional int32 maps_count = 5;
	optional int32 maps_current = 6;
	optional int32 team_id_start = 7;
	optional int32 team_id_veto1 = 8;
	optional int32 team_id_pickn = 9;
	repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
}

message CPreMatchInfoData {
	message TeamStats {
		optional int32 match_info_idxtxt = 1;
		optional string match_info_txt = 2;
		repeated string match_info_teams = 3;
	}

	optional int32 predictions_pct = 1;
	optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
	repeated .CPreMatchInfoData.TeamStats stats = 5;
	repeated int32 wins = 6;
}

message CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve {
	repeated uint32 account_ids = 1;
	optional uint32 game_type = 2;
	optional uint64 match_id = 3;
	optional uint32 server_version = 4;
	optional uint32 flags = 18;
	repeated .PlayerRankingInfo rankings = 5;
	optional uint64 encryption_key = 6;
	optional uint64 encryption_key_pub = 7;
	repeated uint32 party_ids = 8;
	repeated .IpAddressMask whitelist = 9;
	optional uint64 tv_master_steamid = 10;
	optional .TournamentEvent tournament_event = 11;
	repeated .TournamentTeam tournament_teams = 12;
	repeated uint32 tournament_casters_account_ids = 13;
	optional uint64 tv_relay_steamid = 14;
	optional .CPreMatchInfoData pre_match_data = 15;
	optional uint32 rtime32_event_start = 16;
	optional uint32 tv_control = 17;
}

message CMsgGCCStrike15_v2_MatchmakingServerReservationResponse {
	optional uint64 reservationid = 1;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
	optional string map = 3;
	optional uint64 gc_reservation_sent = 4;
	optional uint32 server_version = 5;
	optional .ServerHltvInfo tv_info = 6;
	repeated uint32 reward_player_accounts = 7;
	repeated uint32 idle_player_accounts = 8;
	optional uint32 reward_item_attr_def_idx = 9;
	optional uint32 reward_item_attr_value = 10;
	optional uint32 reward_item_attr_reward_idx = 11;
	optional uint32 reward_drop_list = 12;
	optional string tournament_tag = 13;
	optional uint32 legacy_steamdatagram_port = 14;
	optional uint32 steamdatagram_routing = 17;
	optional fixed32 test_token = 15;
	optional uint32 flags = 16;
}

message CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve {
	optional uint64 serverid = 1;
	optional uint32 direct_udp_ip = 2;
	optional uint32 direct_udp_port = 3;
	optional uint64 reservationid = 4;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
	optional string map = 6;
	optional string server_address = 7;
}

message CMsgGCCStrike15_v2_MatchmakingServerRoundStats {
	message DropInfo {
		optional uint32 account_mvp = 1;
	}

	optional uint64 reservationid = 1;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
	optional string map = 3;
	optional int32 round = 4;
	repeated int32 kills = 5;
	repeated int32 assists = 6;
	repeated int32 deaths = 7;
	repeated int32 scores = 8;
	repeated int32 pings = 9;
	optional int32 round_result = 10;
	optional int32 match_result = 11;
	repeated int32 team_scores = 12;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
	optional int32 reservation_stage = 14;
	optional int32 match_duration = 15;
	repeated int32 enemy_kills = 16;
	repeated int32 enemy_headshots = 17;
	repeated int32 enemy_3ks = 18;
	repeated int32 enemy_4ks = 19;
	repeated int32 enemy_5ks = 20;
	repeated int32 mvps = 21;
	optional uint32 spectators_count = 22;
	optional uint32 spectators_count_tv = 23;
	optional uint32 spectators_count_lnk = 24;
	repeated int32 enemy_kills_agg = 25;
	optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
}

message CMsgGCCStrike15_v2_MatchmakingServerMatchEnd {
	optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
	optional uint64 rematch = 4;
	optional uint32 replay_token = 5;
	optional uint32 replay_cluster_id = 6;
	optional bool aborted_match = 7;
	optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
	optional uint32 server_version = 9;
}

message CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial {
	optional uint64 reservationid = 1;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
	optional .CMsgGC_ServerQuestUpdateData completed_player_quest_data = 4;
	optional uint32 server_version = 5;
}

message CMsgGCCStrike15_v2_MatchmakingClient2GCHello {
}

message CMsgGCCStrike15_v2_MatchmakingGC2ClientHello {
	optional uint32 account_id = 1;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
	optional .GlobalStatistics global_stats = 3;
	optional uint32 penalty_seconds = 4;
	optional uint32 penalty_reason = 5;
	optional int32 vac_banned = 6;
	optional .PlayerRankingInfo ranking = 7;
	optional .PlayerCommendationInfo commendation = 8;
	optional .PlayerMedalsInfo medals = 9;
	optional .TournamentEvent my_current_event = 10;
	repeated .TournamentTeam my_current_event_teams = 11;
	optional .TournamentTeam my_current_team = 12;
	repeated .TournamentEvent my_current_event_stages = 13;
	optional uint32 survey_vote = 14;
	optional .AccountActivity activity = 15;
	optional int32 player_level = 17;
	optional int32 player_cur_xp = 18;
	optional int32 player_xp_bonus_flags = 19;
	repeated .PlayerRankingInfo rankings = 20;
}

message CMsgGCCStrike15_v2_AccountPrivacySettings {
	message Setting {
		optional uint32 setting_type = 1;
		optional uint32 setting_value = 2;
	}

	repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
}

message CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon {
	optional uint32 account_id = 1;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
	optional uint32 penalty_seconds = 3;
	optional uint32 penalty_reason = 4;
}

message CMsgGCCStrike15_v2_MatchmakingServer2GCKick {
	optional uint32 account_id = 1;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
	optional uint32 reason = 3;
}

message CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate {
	repeated .PlayerRankingInfo rankings = 1;
	optional uint64 match_id = 2;
}

message CMsgGCCStrike15_v2_ClientGCRankUpdate {
	repeated .PlayerRankingInfo rankings = 1;
}

message CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate {
	optional string main_post_url = 1;
}

message CMsgGCCStrike15_v2_ServerNotificationForUserPenalty {
	optional uint32 account_id = 1;
	optional uint32 reason = 2;
	optional uint32 seconds = 3;
}

message CMsgGCCStrike15_v2_ClientReportPlayer {
	optional uint32 account_id = 1;
	optional uint32 rpt_aimbot = 2;
	optional uint32 rpt_wallhack = 3;
	optional uint32 rpt_speedhack = 4;
	optional uint32 rpt_teamharm = 5;
	optional uint32 rpt_textabuse = 6;
	optional uint32 rpt_voiceabuse = 7;
	optional uint64 match_id = 8;
}

message CMsgGCCStrike15_v2_ClientCommendPlayer {
	optional uint32 account_id = 1;
	optional uint64 match_id = 8;
	optional .PlayerCommendationInfo commendation = 9;
	optional uint32 tokens = 10;
}

message CMsgGCCStrike15_v2_ClientReportServer {
	optional uint32 rpt_poorperf = 1;
	optional uint32 rpt_abusivemodels = 2;
	optional uint32 rpt_badmotd = 3;
	optional uint32 rpt_listingabuse = 4;
	optional uint32 rpt_inventoryabuse = 5;
	optional uint64 match_id = 8;
}

message CMsgGCCStrike15_v2_ClientReportResponse {
	optional uint64 confirmation_id = 1;
	optional uint32 account_id = 2;
	optional uint32 server_ip = 3;
	optional uint32 response_type = 4;
	optional uint32 response_result = 5;
	optional uint32 tokens = 6;
}

message CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends {
	optional uint32 request_id = 1;
	repeated uint32 account_ids = 2;
	optional uint64 serverid = 3;
	optional uint64 matchid = 4;
	optional uint32 client_launcher = 5;
	repeated .DataCenterPing data_center_pings = 6;
}

message WatchableMatchInfo {
	optional uint32 server_ip = 1;
	optional uint32 tv_port = 2;
	optional uint32 tv_spectators = 3;
	optional uint32 tv_time = 4;
	optional bytes tv_watch_password = 5;
	optional uint64 cl_decryptdata_key = 6;
	optional uint64 cl_decryptdata_key_pub = 7;
	optional uint32 game_type = 8;
	optional string game_mapgroup = 9;
	optional string game_map = 10;
	optional uint64 server_id = 11;
	optional uint64 match_id = 12;
	optional uint64 reservation_id = 13;
}

message CMsgGCCStrike15_v2_ClientRequestJoinFriendData {
	optional uint32 version = 1;
	optional uint32 account_id = 2;
	optional uint32 join_token = 3;
	optional uint32 join_ipp = 4;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
	optional string errormsg = 6;
}

message CMsgGCCStrike15_v2_ClientRequestJoinServerData {
	optional uint32 version = 1;
	optional uint32 account_id = 2;
	optional uint64 serverid = 3;
	optional uint32 server_ip = 4;
	optional uint32 server_port = 5;
	optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
	optional string errormsg = 7;
}

message CMsgGCCstrike15_v2_ClientRequestNewMission {
	optional uint32 mission_id = 2;
	optional uint32 campaign_id = 3;
}

message CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded {
	repeated .XpProgressData xp_progress_data = 1;
	optional uint32 account_id = 2;
	optional uint32 current_xp = 3;
	optional uint32 current_level = 4;
	optional uint32 upgraded_defidx = 5;
	optional uint32 operation_points_awarded = 6;
}

message CMsgGCCStrike15_v2_WatchInfoUsers {
	optional uint32 request_id = 1;
	repeated uint32 account_ids = 2;
	repeated .WatchableMatchInfo watchable_match_infos = 3;
	optional uint32 extended_timeout = 5;
}

message CMsgGCCStrike15_v2_ClientRequestPlayersProfile {
	optional uint32 request_id__deprecated = 1;
	repeated uint32 account_ids__deprecated = 2;
	optional uint32 account_id = 3;
	optional uint32 request_level = 4;
}

message CMsgGCCStrike15_v2_PlayersProfile {
	optional uint32 request_id = 1;
	repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
}

message CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate {
	optional uint64 caseid = 1;
	optional uint32 suspectid = 3;
	optional uint32 fractionid = 4;
	optional uint32 rpt_aimbot = 5;
	optional uint32 rpt_wallhack = 6;
	optional uint32 rpt_speedhack = 7;
	optional uint32 rpt_teamharm = 8;
	optional uint32 reason = 9;
}

message CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment {
	optional uint64 caseid = 1;
	optional string caseurl = 2;
	optional uint32 verdict = 3;
	optional uint32 timestamp = 4;
	optional uint32 throttleseconds = 5;
	optional uint32 suspectid = 6;
	optional uint32 fractionid = 7;
	optional uint32 numrounds = 8;
	optional uint32 fractionrounds = 9;
	optional int32 streakconvictions = 10;
	optional uint32 reason = 11;
}

message CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus {
	optional uint64 caseid = 1;
	optional uint32 statusid = 2;
}

message CClientHeaderOverwatchEvidence {
	optional uint32 accountid = 1;
	optional uint64 caseid = 2;
}

message CMsgGCCStrike15_v2_GC2ClientTextMsg {
	optional uint32 id = 1;
	optional uint32 type = 2;
	optional bytes payload = 3;
}

message CMsgGCCStrike15_v2_Client2GCTextMsg {
	optional uint32 id = 1;
	repeated bytes args = 2;
}

message CMsgGCCStrike15_v2_MatchEndRunRewardDrops {
	optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
	optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
}

message CEconItemPreviewDataBlock {
	message Sticker {
		optional uint32 slot = 1;
		optional uint32 sticker_id = 2;
		optional float wear = 3;
		optional float scale = 4;
		optional float rotation = 5;
		optional uint32 tint_id = 6;
	}

	optional uint32 accountid = 1;
	optional uint64 itemid = 2;
	optional uint32 defindex = 3;
	optional uint32 paintindex = 4;
	optional uint32 rarity = 5;
	optional uint32 quality = 6;
	optional uint32 paintwear = 7;
	optional uint32 paintseed = 8;
	optional uint32 killeaterscoretype = 9;
	optional uint32 killeatervalue = 10;
	optional string customname = 11;
	repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
	optional uint32 inventory = 13;
	optional uint32 origin = 14;
	optional uint32 questid = 15;
	optional uint32 dropreason = 16;
	optional uint32 musicindex = 17;
	optional int32 entindex = 18;
}

message CMsgGCCStrike15_v2_MatchEndRewardDropsNotification {
	optional .CEconItemPreviewDataBlock iteminfo = 6;
}

message CMsgItemAcknowledged {
	optional .CEconItemPreviewDataBlock iteminfo = 1;
}

message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest {
	optional uint64 param_s = 1;
	optional uint64 param_a = 2;
	optional uint64 param_d = 3;
	optional uint64 param_m = 4;
}

message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse {
	optional .CEconItemPreviewDataBlock iteminfo = 1;
}

message CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification {
	optional uint64 match_id = 1;
	optional uint32 defindex = 2;
	repeated uint32 accountids = 3;
}

message CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames {
}

message CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser {
	optional uint32 accountid = 1;
}

message CMsgGCCStrike15_v2_MatchListRequestRecentUserGames {
	optional uint32 accountid = 1;
}

message CMsgGCCStrike15_v2_MatchListRequestTournamentGames {
	optional int32 eventid = 1;
}

message CMsgGCCStrike15_v2_MatchListRequestFullGameInfo {
	optional uint64 matchid = 1;
	optional uint64 outcomeid = 2;
	optional uint32 token = 3;
}

message CDataGCCStrike15_v2_MatchInfo {
	optional uint64 matchid = 1;
	optional uint32 matchtime = 2;
	optional .WatchableMatchInfo watchablematchinfo = 3;
	optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
	repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
}

message CDataGCCStrike15_v2_TournamentGroupTeam {
	optional int32 team_id = 1;
	optional int32 score = 2;
	optional bool correctpick = 3;
}

message CDataGCCStrike15_v2_TournamentGroup {
	message Picks {
		repeated int32 pickids = 1;
	}

	optional uint32 groupid = 1;
	optional string name = 2;
	optional string desc = 3;
	optional uint32 picks__deprecated = 4;
	repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
	repeated int32 stage_ids = 6;
	optional uint32 picklockuntiltime = 7;
	optional uint32 pickableteams = 8;
	optional uint32 points_per_pick = 9;
	repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
}

message CDataGCCStrike15_v2_TournamentSection {
	optional uint32 sectionid = 1;
	optional string name = 2;
	optional string desc = 3;
	repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
}

message CDataGCCStrike15_v2_TournamentInfo {
	repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
	optional .TournamentEvent tournament_event = 2;
	repeated .TournamentTeam tournament_teams = 3;
}

message CMsgGCCStrike15_v2_MatchList {
	optional uint32 msgrequestid = 1;
	optional uint32 accountid = 2;
	optional uint32 servertime = 3;
	repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
	repeated .TournamentTeam streams = 5;
	optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
}

message CMsgGCCStrike15_v2_Predictions {
	message GroupMatchTeamPick {
		optional int32 sectionid = 1;
		optional int32 groupid = 2;
		optional int32 index = 3;
		optional int32 teamid = 4;
		optional uint64 itemid = 5;
	}

	optional uint32 event_id = 1;
	repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
}

message CMsgGCCStrike15_v2_Fantasy {
	message FantasySlot {
		optional int32 type = 1;
		optional int32 pick = 2;
		optional uint64 itemid = 3;
	}

	message FantasyTeam {
		optional int32 sectionid = 1;
		repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
	}

	optional uint32 event_id = 1;
	repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
}

message CAttribute_String {
	optional string value = 1;
}

message CMsgGCToGCReloadVersions {
}

message CMsgCStrike15Welcome {
	optional uint32 store_item_hash = 5;
	optional uint32 timeplayedconsecutively = 6;
	optional uint32 time_first_played = 10;
	optional uint32 last_time_played = 12;
	optional uint32 last_ip_address = 13;
	optional uint64 gscookieid = 18;
	optional uint64 uniqueid = 19;
}

message CMsgGCCStrike15_v2_ClientVarValueNotificationInfo {
	optional string value_name = 1;
	optional int32 value_int = 2;
	optional uint32 server_addr = 3;
	optional uint32 server_port = 4;
	repeated string choked_blocks = 5;
}

message CMsgGCCStrike15_v2_ServerVarValueNotificationInfo {
	optional uint32 accountid = 1;
	repeated uint32 viewangles = 2;
	optional uint32 type = 3;
}

message CMsgGCCStrike15_v2_GiftsLeaderboardRequest {
}

message CMsgGCCStrike15_v2_GiftsLeaderboardResponse {
	message GiftLeaderboardEntry {
		optional uint32 accountid = 1;
		optional uint32 gifts = 2;
	}

	optional uint32 servertime = 1;
	optional uint32 time_period_seconds = 2;
	optional uint32 total_gifts_given = 3;
	optional uint32 total_givers = 4;
	repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
}

message CMsgGCCStrike15_v2_ClientSubmitSurveyVote {
	optional uint32 survey_id = 1;
	optional uint32 vote = 2;
}

message CMsgGCCStrike15_v2_Server2GCClientValidate {
	optional uint32 accountid = 1;
}

message CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure {
	optional uint32 accountid = 1;
	optional string path = 2;
	optional string file = 3;
	optional uint32 crc = 4;
	optional int32 hash = 5;
	optional int32 len = 6;
	optional int32 pack_number = 7;
	optional int32 pack_file_id = 8;
}

message CMsgGCCStrike15_v2_GC2ClientTournamentInfo {
	optional uint32 eventid = 1;
	optional uint32 stageid = 2;
	optional uint32 game_type = 3;
	repeated uint32 teamids = 4;
}

message CSOEconCoupon {
	optional uint32 entryid = 1 [(key_field) = true];
	optional uint32 defidx = 2;
	optional fixed32 expiration_date = 3;
}

message CSOQuestProgress {
	optional uint32 questid = 1 [(key_field) = true];
	optional uint32 points_remaining = 2;
	optional uint32 bonus_points = 3;
}

message CSOPersonaDataPublic {
	optional int32 player_level = 1;
	optional .PlayerCommendationInfo commendation = 2;
	optional bool elevated_state = 3;
}

message CMsgGC_GlobalGame_Subscribe {
	optional uint64 ticket = 1;
}

message CMsgGC_GlobalGame_Unsubscribe {
	optional int32 timeleft = 1;
}

message CMsgGC_GlobalGame_Play {
	optional uint64 ticket = 1;
	optional uint32 gametimems = 2;
	optional uint32 msperpoint = 3;
}

message CMsgGCCStrike15_v2_AcknowledgePenalty {
	optional int32 acknowledged = 1;
}

message CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin {
	optional uint32 defindex = 1;
	optional uint64 upgradeid = 2;
	optional uint32 hours = 3;
	optional uint32 prestigetime = 4;
}

message CMsgGCCStrike15_v2_Client2GCStreamUnlock {
	optional uint64 ticket = 1;
	optional int32 os = 2;
}

message CMsgGCCStrike15_v2_ClientToGCRequestElevate {
	optional uint32 stage = 1;
}

message CMsgGCCStrike15_v2_ClientToGCChat {
	optional uint64 match_id = 1;
	optional string text = 2;
}

message CMsgGCCStrike15_v2_GCToClientChat {
	optional uint32 account_id = 1;
	optional string text = 2;
}

message CMsgGCCStrike15_v2_ClientAuthKeyCode {
	optional uint32 eventid = 1;
	optional string code = 2;
}

message CMsgGCCStrike15_GotvSyncPacket {
	optional .CEngineGotvSyncPacket data = 1;
}

message PlayerDecalDigitalSignature {
	optional bytes signature = 1;
	optional uint32 accountid = 2;
	optional uint32 rtime = 3;
	repeated float endpos = 4;
	repeated float startpos = 5;
	repeated float right = 6;
	optional uint32 tx_defidx = 7;
	optional int32 entindex = 8;
	optional uint32 hitbox = 9;
	optional float creationtime = 10;
	optional uint32 equipslot = 11;
	optional uint32 trace_id = 12;
	repeated float normal = 13;
	optional uint32 tint_id = 14;
}

message CMsgGCCStrike15_v2_ClientPlayerDecalSign {
	optional .PlayerDecalDigitalSignature data = 1;
	optional uint64 itemid = 2;
}

message CMsgGCCStrike15_v2_ClientLogonFatalError {
	optional uint32 errorcode = 1;
	optional string message = 2;
	optional string country = 3;
}

message CMsgGCCStrike15_v2_ClientPollState {
	optional uint32 pollid = 1;
	repeated string names = 2;
	repeated int32 values = 3;
}

message CMsgGCCStrike15_v2_Party_Register {
	optional uint32 id = 1;
	optional uint32 ver = 2;
	optional uint32 apr = 3;
	optional uint32 ark = 4;
	optional uint32 nby = 5;
	optional uint32 grp = 6;
	optional uint32 slots = 7;
	optional uint32 launcher = 8;
	optional uint32 game_type = 9;
}

message CMsgGCCStrike15_v2_Party_Search {
	optional uint32 ver = 1;
	optional uint32 apr = 2;
	optional uint32 ark = 3;
	repeated uint32 grps = 4;
	optional uint32 launcher = 5;
	optional uint32 game_type = 6;
}

message CMsgGCCStrike15_v2_Party_SearchResults {
	message Entry {
		optional uint32 id = 1;
		optional uint32 grp = 2;
	}

	repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
}

message CMsgGCCStrike15_v2_Party_Invite {
	optional uint32 accountid = 1;
	optional uint32 lobbyid = 2;
}

message CMsgGCCStrike15_v2_Account_RequestCoPlays {
	message Player {
		optional uint32 accountid = 1;
		optional uint32 rtcoplay = 2;
		optional bool online = 3;
	}

	repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
	optional uint32 servertime = 2;
}

message CMsgGCCStrike15_v2_ClientToGCRequestTicket {
	optional fixed64 authorized_steam_id = 1;
	optional fixed32 authorized_public_ip = 2;
	optional fixed64 gameserver_steam_id = 3;
	optional fixed64 legacy_gameserver_net_id = 4;
	optional string gameserver_sdr_routing = 5;
}

message CMsgGCToClientSteamDatagramTicket {
	optional fixed32 legacy_time_expiry = 1;
	optional fixed64 legacy_authorized_steam_id = 2;
	optional fixed32 legacy_authorized_public_ip = 3;
	optional fixed64 legacy_gameserver_steam_id = 4;
	optional fixed64 legacy_gameserver_net_id = 5;
	optional bytes legacy_signature = 6;
	optional uint32 legacy_app_id = 7;
	repeated bytes legacy_extra_fields = 8;
	optional bytes serialized_ticket = 16;
}

message CMsgGCCStrike15_v2_ClientRequestOffers {
}

message CMsgGCCStrike15_v2_ClientAccountBalance {
	optional uint64 amount = 1;
	optional string url = 2;
}

message CMsgGCCStrike15_v2_ClientPartyJoinRelay {
	optional uint32 accountid = 1;
	optional uint64 lobbyid = 2;
}

message CMsgGCCStrike15_v2_ClientPartyWarning {
	message Entry {
		optional uint32 accountid = 1;
		optional uint32 warntype = 2;
	}

	repeated .CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries = 1;
}

import "google/protobuf/descriptor.proto";

option cc_generic_services = false;

message CEngineGotvSyncPacket {
	optional uint64 match_id = 1;
	optional uint32 instance_id = 2;
	optional uint32 signupfragment = 3;
	optional uint32 currentfragment = 4;
	optional float tickrate = 5;
	optional uint32 tick = 6;
	optional float rtdelay = 8;
	optional float rcvage = 9;
	optional float keyframe_interval = 10;
}

import "steammessages.proto";

option optimize_for = SPEED;
option cc_generic_services = false;

enum GCClientLauncherType {
	GCClientLauncherType_DEFAULT = 0;
	GCClientLauncherType_PERFECTWORLD = 1;
}

enum GCConnectionStatus {
	GCConnectionStatus_HAVE_SESSION = 0;
	GCConnectionStatus_GC_GOING_DOWN = 1;
	GCConnectionStatus_NO_SESSION = 2;
	GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE = 3;
	GCConnectionStatus_NO_STEAM = 4;
}

enum ESteamPaymentRuleType {
	k_EPaymentRuleTypeComposite = 0;
	k_EPaymentRuleTypeWorkshop = 1;
	k_EPaymentRuleTypeServiceProvider = 2;
	k_EPaymentRuleTypePartner = 3;
	k_EPaymentRuleTypeSpecialPayment = 4;
}

message CMsgSOIDOwner {
	optional uint32 type = 1;
	optional uint64 id = 2;
}

message CMsgSOSingleObject {
	optional int32 type_id = 2;
	optional bytes object_data = 3;
	optional fixed64 version = 4;
	optional .CMsgSOIDOwner owner_soid = 5;
}

message CMsgSOMultipleObjects {
	message SingleObject {
		option (msgpool_soft_limit) = 256;
		option (msgpool_hard_limit) = 1024;
		optional int32 type_id = 1;
		optional bytes object_data = 2;
	}

	repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
	optional fixed64 version = 3;
	repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
	repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
	optional .CMsgSOIDOwner owner_soid = 6;
}

message CMsgSOCacheSubscribed {
	message SubscribedType {
		optional int32 type_id = 1;
		repeated bytes object_data = 2;
	}

	repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
	optional fixed64 version = 3;
	optional .CMsgSOIDOwner owner_soid = 4;
}

message CMsgSOCacheUnsubscribed {
	optional .CMsgSOIDOwner owner_soid = 2;
}

message CMsgSOCacheSubscriptionCheck {
	optional fixed64 version = 2;
	optional .CMsgSOIDOwner owner_soid = 3;
}

message CMsgSOCacheSubscriptionRefresh {
	optional .CMsgSOIDOwner owner_soid = 2;
}

message CMsgSOCacheVersion {
	optional fixed64 version = 1;
}

message CMsgAccountDetails {
	optional bool valid = 1;
	optional string account_name = 2;
	optional bool public_profile = 4;
	optional bool public_inventory = 5;
	optional bool vac_banned = 6;
	optional bool cyber_cafe = 7;
	optional bool school_account = 8;
	optional bool free_trial_account = 9;
	optional bool subscribed = 10;
	optional bool low_violence = 11;
	optional bool limited = 12;
	optional bool trusted = 13;
	optional uint32 package = 14;
	optional fixed32 time_cached = 15;
	optional bool account_locked = 16;
	optional bool community_banned = 17;
	optional bool trade_banned = 18;
	optional bool eligible_for_community_market = 19;
}

message CMsgGCMultiplexMessage {
	optional uint32 msgtype = 1;
	optional bytes payload = 2;
	repeated fixed64 steamids = 3;
	optional bool replytogc = 4;
}

message CMsgGCMultiplexMessage_Response {
	optional uint32 msgtype = 1;
}

message CGCToGCMsgMasterAck {
	optional uint32 dir_index = 1;
	optional uint32 gc_type = 2;
}

message CGCToGCMsgMasterAck_Response {
	optional int32 eresult = 1 [default = 2];
}

message CGCToGCMsgMasterStartupComplete {
}

message CGCToGCMsgRouted {
	optional uint32 msg_type = 1;
	optional fixed64 sender_id = 2;
	optional bytes net_message = 3;
	optional uint32 ip = 4;
}

message CGCToGCMsgRoutedReply {
	optional uint32 msg_type = 1;
	optional bytes net_message = 2;
}

message CMsgGCUpdateSessionIP {
	optional fixed64 steamid = 1;
	optional fixed32 ip = 2;
}

message CMsgGCRequestSessionIP {
	optional fixed64 steamid = 1;
}

message CMsgGCRequestSessionIPResponse {
	optional fixed32 ip = 1;
}

message CMsgSOCacheHaveVersion {
	optional .CMsgSOIDOwner soid = 1;
	optional fixed64 version = 2;
}

message CMsgClientHello {
	optional uint32 version = 1;
	repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
	optional uint32 client_session_need = 3;
	optional uint32 client_launcher = 4;
	optional uint32 partner_srcid = 5;
	optional uint32 partner_accountid = 6;
	optional uint32 partner_accountflags = 7;
	optional uint32 partner_accountbalance = 8;
}

message CMsgServerHello {
	optional uint32 version = 1;
	repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
	optional uint32 legacy_client_session_need = 3;
	optional uint32 client_launcher = 4;
	optional uint32 legacy_steamdatagram_port = 5;
	optional string steamdatagram_routing = 6;
	optional uint32 required_internal_addr = 7;
}

message CMsgClientWelcome {
	message Location {
		optional float latitude = 1;
		optional float longitude = 2;
		optional string country = 3;
	}

	optional uint32 version = 1;
	optional bytes game_data = 2;
	repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
	repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
	optional .CMsgClientWelcome.Location location = 5;
	optional bytes game_data2 = 6;
	optional uint32 rtime32_gc_welcome_timestamp = 7;
	optional uint32 currency = 8;
	optional uint32 balance = 9;
	optional string balance_url = 10;
	optional string txn_country_code = 11;
}

message CMsgConnectionStatus {
	optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
	optional uint32 client_session_need = 2;
	optional int32 queue_position = 3;
	optional int32 queue_size = 4;
	optional int32 wait_seconds = 5;
	optional int32 estimated_wait_seconds_remaining = 6;
}

message CWorkshop_PopulateItemDescriptions_Request {
	message SingleItemDescription {
		optional uint32 gameitemid = 1;
		optional string item_description = 2;
		optional bool one_per_account = 3;
	}

	message ItemDescriptionsLanguageBlock {
		optional string language = 1;
		repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
	}

	optional uint32 appid = 1;
	repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
}

message CWorkshop_GetContributors_Request {
	optional uint32 appid = 1;
	optional uint32 gameitemid = 2;
}

message CWorkshop_GetContributors_Response {
	repeated fixed64 contributors = 1;
}

message CWorkshop_SetItemPaymentRules_Request {
	message WorkshopItemPaymentRule {
		optional uint64 workshop_file_id = 1;
		optional float revenue_percentage = 2;
		optional string rule_description = 3;
		optional uint32 rule_type = 4 [default = 1];
	}

	message PartnerItemPaymentRule {
		optional uint32 account_id = 1;
		optional float revenue_percentage = 2;
		optional string rule_description = 3;
	}

	optional uint32 appid = 1;
	optional uint32 gameitemid = 2;
	repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
	repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
}

message CWorkshop_SetItemPaymentRules_Response {
}

message CGameServers_AggregationQuery_Request {
	optional string filter = 1;
	repeated string group_fields = 3;
}

message CGameServers_AggregationQuery_Response {
	message Group {
		repeated string group_values = 1;
		optional uint32 servers_empty = 2;
		optional uint32 servers_full = 3;
		optional uint32 servers_total = 4;
		optional uint32 players_humans = 5;
		optional uint32 players_bots = 6;
		optional uint32 player_capacity = 7;
	}

	repeated .CGameServers_AggregationQuery_Response.Group groups = 1;
}

message CWorkshop_AddSpecialPayment_Request {
	optional uint32 appid = 1;
	optional uint32 gameitemid = 2;
	optional string date = 3;
	optional uint64 payment_us_usd = 4;
	optional uint64 payment_row_usd = 5;
}

message CWorkshop_AddSpecialPayment_Response {
}

import "google/protobuf/descriptor.proto";

option optimize_for = SPEED;
option cc_generic_services = false;

extend .google.protobuf.FieldOptions {
	optional bool key_field = 60000 [default = false];
}

extend .google.protobuf.MessageOptions {
	optional int32 msgpool_soft_limit = 60000 [default = 32];
	optional int32 msgpool_hard_limit = 60001 [default = 384];
}

enum GCProtoBufMsgSrc {
	GCProtoBufMsgSrc_Unspecified = 0;
	GCProtoBufMsgSrc_FromSystem = 1;
	GCProtoBufMsgSrc_FromSteamID = 2;
	GCProtoBufMsgSrc_FromGC = 3;
	GCProtoBufMsgSrc_ReplySystem = 4;
}

message CMsgProtoBufHeader {
	option (msgpool_soft_limit) = 256;
	option (msgpool_hard_limit) = 1024;
	optional fixed64 client_steam_id = 1;
	optional int32 client_session_id = 2;
	optional uint32 source_app_id = 3;
	optional fixed64 job_id_source = 10 [default = 18446744073709551615];
	optional fixed64 job_id_target = 11 [default = 18446744073709551615];
	optional string target_job_name = 12;
	optional int32 eresult = 13 [default = 2];
	optional string error_message = 14;
	optional uint32 ip = 15;
	optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
	optional uint32 gc_dir_index_source = 201;
}

message CMsgWebAPIKey {
	optional uint32 status = 1 [default = 255];
	optional uint32 account_id = 2 [default = 0];
	optional uint32 publisher_group_id = 3 [default = 0];
	optional uint32 key_id = 4;
	optional string domain = 5;
}

message CMsgHttpRequest {
	message RequestHeader {
		optional string name = 1;
		optional string value = 2;
	}

	message QueryParam {
		optional string name = 1;
		optional bytes value = 2;
	}

	optional uint32 request_method = 1;
	optional string hostname = 2;
	optional string url = 3;
	repeated .CMsgHttpRequest.RequestHeader headers = 4;
	repeated .CMsgHttpRequest.QueryParam get_params = 5;
	repeated .CMsgHttpRequest.QueryParam post_params = 6;
	optional bytes body = 7;
	optional uint32 absolute_timeout = 8;
}

message CMsgWebAPIRequest {
	optional string UNUSED_job_name = 1;
	optional string interface_name = 2;
	optional string method_name = 3;
	optional uint32 version = 4;
	optional .CMsgWebAPIKey api_key = 5;
	optional .CMsgHttpRequest request = 6;
	optional uint32 routing_app_id = 7;
}

message CMsgHttpResponse {
	message ResponseHeader {
		optional string name = 1;
		optional string value = 2;
	}

	optional uint32 status_code = 1;
	repeated .CMsgHttpResponse.ResponseHeader headers = 2;
	optional bytes body = 3;
}

message CMsgAMFindAccounts {
	optional uint32 search_type = 1;
	optional string search_string = 2;
}

message CMsgAMFindAccountsResponse {
	repeated fixed64 steam_id = 1;
}

message CMsgNotifyWatchdog {
	optional uint32 source = 1;
	optional uint32 alert_type = 2;
	optional uint32 alert_destination = 3;
	optional bool critical = 4;
	optional uint32 time = 5;
	optional uint32 appid = 6;
	optional string text = 7;
}

message CMsgAMGetLicenses {
	optional fixed64 steamid = 1;
}

message CMsgPackageLicense {
	optional uint32 package_id = 1;
	optional uint32 time_created = 2;
	optional uint32 owner_id = 3;
}

message CMsgAMGetLicensesResponse {
	repeated .CMsgPackageLicense license = 1;
	optional uint32 result = 2;
}

message CMsgAMGetUserGameStats {
	optional fixed64 steam_id = 1;
	optional fixed64 game_id = 2;
	repeated uint32 stats = 3;
}

message CMsgAMGetUserGameStatsResponse {
	message Stats {
		optional uint32 stat_id = 1;
		optional uint32 stat_value = 2;
	}

	message Achievement_Blocks {
		optional uint32 achievement_id = 1;
		optional uint32 achievement_bit_id = 2;
		optional fixed32 unlock_time = 3;
	}

	optional fixed64 steam_id = 1;
	optional fixed64 game_id = 2;
	optional int32 eresult = 3 [default = 2];
	repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
	repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
}

message CMsgGCGetCommandList {
	optional uint32 app_id = 1;
	optional string command_prefix = 2;
}

message CMsgGCGetCommandListResponse {
	repeated string command_name = 1;
}

message CGCMsgMemCachedGet {
	repeated string keys = 1;
}

message CGCMsgMemCachedGetResponse {
	message ValueTag {
		optional bool found = 1;
		optional bytes value = 2;
	}

	repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
}

message CGCMsgMemCachedSet {
	message KeyPair {
		optional string name = 1;
		optional bytes value = 2;
	}

	repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
}

message CGCMsgMemCachedDelete {
	repeated string keys = 1;
}

message CGCMsgMemCachedStats {
}

message CGCMsgMemCachedStatsResponse {
	optional uint64 curr_connections = 1;
	optional uint64 cmd_get = 2;
	optional uint64 cmd_set = 3;
	optional uint64 cmd_flush = 4;
	optional uint64 get_hits = 5;
	optional uint64 get_misses = 6;
	optional uint64 delete_hits = 7;
	optional uint64 delete_misses = 8;
	optional uint64 bytes_read = 9;
	optional uint64 bytes_written = 10;
	optional uint64 limit_maxbytes = 11;
	optional uint64 curr_items = 12;
	optional uint64 evictions = 13;
	optional uint64 bytes = 14;
}

message CGCMsgSQLStats {
	optional uint32 schema_catalog = 1;
}

message CGCMsgSQLStatsResponse {
	optional uint32 threads = 1;
	optional uint32 threads_connected = 2;
	optional uint32 threads_active = 3;
	optional uint32 operations_submitted = 4;
	optional uint32 prepared_statements_executed = 5;
	optional uint32 non_prepared_statements_executed = 6;
	optional uint32 deadlock_retries = 7;
	optional uint32 operations_timed_out_in_queue = 8;
	optional uint32 errors = 9;
}

message CMsgAMAddFreeLicense {
	optional fixed64 steamid = 1;
	optional uint32 ip_public = 2;
	optional uint32 packageid = 3;
	optional string store_country_code = 4;
}

message CMsgAMAddFreeLicenseResponse {
	optional int32 eresult = 1 [default = 2];
	optional int32 purchase_result_detail = 2;
	optional fixed64 transid = 3;
}

message CGCMsgGetIPLocation {
	repeated fixed32 ips = 1;
}

message CIPLocationInfo {
	optional uint32 ip = 1;
	optional float latitude = 2;
	optional float longitude = 3;
	optional string country = 4;
	optional string state = 5;
	optional string city = 6;
}

message CGCMsgGetIPLocationResponse {
	repeated .CIPLocationInfo infos = 1;
}

message CGCMsgSystemStatsSchema {
	optional uint32 gc_app_id = 1;
	optional bytes schema_kv = 2;
}

message CGCMsgGetSystemStats {
}

message CGCMsgGetSystemStatsResponse {
	optional uint32 gc_app_id = 1;
	optional bytes stats_kv = 2;
	optional uint32 active_jobs = 3;
	optional uint32 yielding_jobs = 4;
	optional uint32 user_sessions = 5;
	optional uint32 game_server_sessions = 6;
	optional uint32 socaches = 7;
	optional uint32 socaches_to_unload = 8;
	optional uint32 socaches_loading = 9;
	optional uint32 writeback_queue = 10;
	optional uint32 steamid_locks = 11;
	optional uint32 logon_queue = 12;
	optional uint32 logon_jobs = 13;
}

message CMsgAMSendEmail {
	message ReplacementToken {
		optional string token_name = 1;
		optional string token_value = 2;
	}

	message PersonaNameReplacementToken {
		optional fixed64 steamid = 1;
		optional string token_name = 2;
	}

	optional fixed64 steamid = 1;
	optional uint32 email_msg_type = 2;
	optional uint32 email_format = 3;
	repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
	optional uint32 source_gc = 6;
	repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
}

message CMsgAMSendEmailResponse {
	optional uint32 eresult = 1 [default = 2];
}

message CMsgGCGetEmailTemplate {
	optional uint32 app_id = 1;
	optional uint32 email_msg_type = 2;
	optional int32 email_lang = 3;
	optional int32 email_format = 4;
}

message CMsgGCGetEmailTemplateResponse {
	optional uint32 eresult = 1 [default = 2];
	optional bool template_exists = 2;
	optional string template = 3;
}

message CMsgAMGrantGuestPasses2 {
	optional fixed64 steam_id = 1;
	optional uint32 package_id = 2;
	optional int32 passes_to_grant = 3;
	optional int32 days_to_expiration = 4;
	optional int32 action = 5;
}

message CMsgAMGrantGuestPasses2Response {
	optional int32 eresult = 1 [default = 2];
	optional int32 passes_granted = 2 [default = 0];
}

message CGCSystemMsg_GetAccountDetails {
	option (msgpool_soft_limit) = 128;
	option (msgpool_hard_limit) = 512;
	optional fixed64 steamid = 1;
	optional uint32 appid = 2;
}

message CGCSystemMsg_GetAccountDetails_Response {
	option (msgpool_soft_limit) = 128;
	option (msgpool_hard_limit) = 512;
	optional uint32 eresult_deprecated = 1 [default = 2];
	optional string account_name = 2;
	optional string persona_name = 3;
	optional bool is_profile_public = 4;
	optional bool is_inventory_public = 5;
	optional bool is_vac_banned = 7;
	optional bool is_cyber_cafe = 8;
	optional bool is_school_account = 9;
	optional bool is_limited = 10;
	optional bool is_subscribed = 11;
	optional uint32 package = 12;
	optional bool is_free_trial_account = 13;
	optional uint32 free_trial_expiration = 14;
	optional bool is_low_violence = 15;
	optional bool is_account_locked_down = 16;
	optional bool is_community_banned = 17;
	optional bool is_trade_banned = 18;
	optional uint32 trade_ban_expiration = 19;
	optional uint32 accountid = 20;
	optional uint32 suspension_end_time = 21;
	optional string currency = 22;
	optional uint32 steam_level = 23;
	optional uint32 friend_count = 24;
	optional uint32 account_creation_time = 25;
	optional bool is_steamguard_enabled = 27;
	optional bool is_phone_verified = 28;
	optional bool is_two_factor_auth_enabled = 29;
	optional uint32 two_factor_enabled_time = 30;
	optional uint32 phone_verification_time = 31;
	optional uint64 phone_id = 33;
	optional bool is_phone_identifying = 34;
	optional uint32 rt_identity_linked = 35;
	optional uint32 rt_birth_date = 36;
	optional string txn_country_code = 37;
}

message CMsgGCGetPersonaNames {
	repeated fixed64 steamids = 1;
}

message CMsgGCGetPersonaNames_Response {
	message PersonaName {
		optional fixed64 steamid = 1;
		optional string persona_name = 2;
	}

	repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
	repeated fixed64 failed_lookup_steamids = 2;
}

message CMsgGCCheckFriendship {
	optional fixed64 steamid_left = 1;
	optional fixed64 steamid_right = 2;
}

message CMsgGCCheckFriendship_Response {
	optional bool success = 1;
	optional bool found_friendship = 2;
}

message CMsgGCMsgMasterSetDirectory {
	message SubGC {
		optional uint32 dir_index = 1;
		optional string name = 2;
		optional string box = 3;
		optional string command_line = 4;
		optional string gc_binary = 5;
	}

	optional uint32 master_dir_index = 1;
	repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
}

message CMsgGCMsgMasterSetDirectory_Response {
	optional int32 eresult = 1 [default = 2];
}

message CMsgGCMsgWebAPIJobRequestForwardResponse {
	optional uint32 dir_index = 1;
}

message CGCSystemMsg_GetPurchaseTrust_Request {
	optional fixed64 steamid = 1;
}

message CGCSystemMsg_GetPurchaseTrust_Response {
	optional bool has_prior_purchase_history = 1;
	optional bool has_no_recent_password_resets = 2;
	optional bool is_wallet_cash_trusted = 3;
	optional uint32 time_all_trusted = 4;
}

message CMsgGCHAccountVacStatusChange {
	optional fixed64 steam_id = 1;
	optional uint32 app_id = 2;
	optional uint32 rtime_vacban_starts = 3;
	optional bool is_banned_now = 4;
	optional bool is_banned_future = 5;
}

message CMsgGCGetPartnerAccountLink {
	optional fixed64 steamid = 1;
}

message CMsgGCGetPartnerAccountLink_Response {
	optional uint32 pwid = 1;
	optional uint32 nexonid = 2;
}

message CMsgGCRoutingInfo {
	enum RoutingMethod {
		RANDOM = 0;
		DISCARD = 1;
		CLIENT_STEAMID = 2;
		PROTOBUF_FIELD_UINT64 = 3;
		WEBAPI_PARAM_UINT64 = 4;
	}

	repeated uint32 dir_index = 1;
	optional .CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
	optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
	optional uint32 protobuf_field = 4;
	optional string webapi_param = 5;
}

message CMsgGCMsgMasterSetWebAPIRouting {
	message Entry {
		optional string interface_name = 1;
		optional string method_name = 2;
		optional .CMsgGCRoutingInfo routing = 3;
	}

	repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
}

message CMsgGCMsgMasterSetClientMsgRouting {
	message Entry {
		optional uint32 msg_type = 1;
		optional .CMsgGCRoutingInfo routing = 2;
	}

	repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
}

message CMsgGCMsgMasterSetWebAPIRouting_Response {
	optional int32 eresult = 1 [default = 2];
}

message CMsgGCMsgMasterSetClientMsgRouting_Response {
	optional int32 eresult = 1 [default = 2];
}

message CMsgGCMsgSetOptions {
	message MessageRange {
		required uint32 low = 1;
		required uint32 high = 2;
	}

	enum Option {
		NOTIFY_USER_SESSIONS = 0;
		NOTIFY_SERVER_SESSIONS = 1;
		NOTIFY_ACHIEVEMENTS = 2;
		NOTIFY_VAC_ACTION = 3;
	}

	repeated .CMsgGCMsgSetOptions.Option options = 1;
	repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
}

message CMsgGCHUpdateSession {
	message ExtraField {
		optional string name = 1;
		optional string value = 2;
	}

	optional fixed64 steam_id = 1;
	optional uint32 app_id = 2;
	optional bool online = 3;
	optional fixed64 server_steam_id = 4;
	optional uint32 server_addr = 5;
	optional uint32 server_port = 6;
	optional uint32 os_type = 7;
	optional uint32 client_addr = 8;
	repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
	optional fixed64 owner_id = 10;
	optional uint32 cm_session_sysid = 11;
	optional uint32 cm_session_identifier = 12;
	repeated uint32 depot_ids = 13;
}

message CMsgNotificationOfSuspiciousActivity {
	message MultipleGameInstances {
		optional uint32 app_instance_count = 1;
		repeated fixed64 other_steamids = 2;
	}

	optional fixed64 steamid = 1;
	optional uint32 appid = 2;
	optional .CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
}

message CMsgDPPartnerMicroTxns {
	message PartnerMicroTxn {
		optional uint32 init_time = 1;
		optional uint32 last_update_time = 2;
		optional uint64 txn_id = 3;
		optional uint32 account_id = 4;
		optional uint32 line_item = 5;
		optional uint64 item_id = 6;
		optional uint32 def_index = 7;
		optional uint64 price = 8;
		optional uint64 tax = 9;
		optional uint64 price_usd = 10;
		optional uint64 tax_usd = 11;
		optional uint32 purchase_type = 12;
		optional uint32 steam_txn_type = 13;
		optional string country_code = 14;
		optional string region_code = 15;
		optional int32 quantity = 16;
		optional uint64 ref_trans_id = 17;
	}

	message PartnerInfo {
		optional uint32 partner_id = 1;
		optional string partner_name = 2;
		optional string currency_code = 3;
		optional string currency_name = 4;
	}

	optional uint32 appid = 1;
	optional string gc_name = 2;
	optional .CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
	repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
}

message CMsgDPPartnerMicroTxnsResponse {
	enum EErrorCode {
		k_MsgValid = 0;
		k_MsgInvalidAppID = 1;
		k_MsgInvalidPartnerInfo = 2;
		k_MsgNoTransactions = 3;
		k_MsgSQLFailure = 4;
		k_MsgPartnerInfoDiscrepancy = 5;
		k_MsgTransactionInsertFailed = 7;
		k_MsgAlreadyRunning = 8;
		k_MsgInvalidTransactionData = 9;
	}

	optional uint32 eresult = 1 [default = 2];
	optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
}


